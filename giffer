#!/usr/bin/env ruby

$LOAD_PATH << "lib"
$LOAD_PATH << "models"

require 'environment'
require 'gif'
Environment.environment = ENV["ENVIRONMENT"] || "production"
$stderr = $stdout

require 'gif'

def menu
<<EOS
What do you want to do?
1. Get a .gif
2. Give a .gif
EOS
end

def menu_criteria
<<EOS
What is your first criteria?
1. Category
2. Emotion
3. Reference
EOS
end

def cat_defaults
  ["Reaction", "Abstract"]
end

def emo_defaults
  ["Happy", "Angry", "Sad", "Approval", "Excitement", "Sarcasm", "Skepticism", "Generic"]
end

def ref_defaults
  ["Meme", "Sports", "Politics"]
end

def select_criteria
  #puts menu_criteria
  #criteria = gets
  #return unless criteria
  #criteria.chomp!
  data_array = ["get", "none", "", "", ""]
  what_category("get", 1, data_array)
=begin
  case criteria
  when "1"
    what_category("get", 1, data_array)
  when "2"
    what_emotion("get", 1, data_array)
  when "3"
    what_reference("get", 1, data_array)
  #when "4"
  #  random_sample
  else
    puts "'#{criteria}' is not a valid selection"
    select_criteria
  end
=end
end

def enter_url
  puts "Enter your url:"
  url = gets
  return unless url
  url.chomp!
  #pass url and get/give variable
  data_array = ["give", url, "", "", ""]
  what_category("give", 1, data_array)
end

def print_db_tags(tag_type, print_type)
    def_array = []
    db_array = Gif.all_tags(tag_type)
    if print_type == "give"
      case tag_type
        when "category"
          def_array = cat_defaults
        when "emotion"
          def_array = emo_defaults
        when "reference"
          def_array = ref_defaults
      end
      def_array.concat(db_array)
    end

    if def_array.length > 0
      print_array = def_array
    else
      print_array = db_array
    end

    first_number = 1
    print_array.each do |tag|
      puts "#{first_number}. #{tag}"
      first_number += 1
    end
    print_array
end

def what_category(type, order, data_array)
  puts "What Category?"
  print_array = print_db_tags("category", type)

  puts "x. New Category" if type == "give"
  category = gets
  return unless category
  category.chomp!
  new_tag("category", order, "2", data_array) if category == "x"
  category_choice = choose_selection(category, print_array, "category", type, order, data_array)
  #what_category(type, order, data_array) if category_choice == "error"
  #data_array[2] = category_choice
  data_array[2] = "category"
  puts data_array[2]

  if order < 3
    order += 1
    what_emotion(type, order, data_array)
  else
    puts "finish menu and open links" #for testing purposes
    if type == "give"
      insert_gif(data_array)
    else
      receive_gif(data_array)
    end
  end
end

def what_emotion(type, order, data_array)
  puts "What Emotion?"
  print_array = print_db_tags("emotion", type)

  puts "x. New Emotion" if type == "give"
  emotion = gets
  return unless emotion
  emotion.chomp!
  new_tag("emotion", order, "3", data_array) if emotion == "x"
  emotion_choice = choose_selection(emotion, print_array, "emotion", type, order, data_array)
  #what_emotion(type, order, data_array) if emotion_choice == "error"
  #data_array[3] = emotion_choice
  data_array[3] = "emotion"
  puts data_array[2]

  if order < 3
    order += 1
    what_reference(type, order, data_array)
  else
    puts "finish menu and open links" #for testing purposes
    if type == "give"
      insert_gif(data_array)
    else
      receive_gif(data_array)
    end
  end
end

def what_reference(type, order, data_array)
  puts "What Reference?"
  print_array = print_db_tags("reference", type)

  puts "x. New Reference" if type == "give"
  reference = gets
  return unless reference
  reference.chomp!
  new_tag("reference", order, "1", data_array) if reference == "x"
  reference_choice = choose_selection(reference, print_array, "reference", type, order, data_array)
  #what_reference(type, order, data_array) if reference_choice == "error"
  #data_array[4] = reference_choice
  data_array[4] = "reference"
  puts data_array[2]

  if order < 3
    order += 1
    what_category(type, order, data_array)
  else
    puts "finish menu and open links" #for testing purposes
    if type == "give"
      insert_gif(data_array)
    else
      receive_gif(data_array)
    end
  end
end

def random_sample
  puts "random sample here"
end

def new_tag(type, order, next_method, data_array)
  puts "Enter new #{type}"
  tag_name = gets
  return unless tag_name
  tag_name.chomp!
  #database stuff
  if order < 3
    order += 1
    case next_method
    when "1"
      data_array[4] = tag_name
      what_category("give", order, data_array)
    when "2"
      data_array[2] = tag_name
      what_emotion("give", order, data_array)
    when "3"
      data_array[3] = tag_name
      what_reference("give", order, data_array)
    end
  else
    puts "finish menu and open links" #for testing purposes
    if type == "give"
      insert_gif(data_array)
    else
      receive_gif(data_array)
    end
  end
end

# REPL
# Read - Eval - Print Loop
def get_menu_selection
  puts menu
  input = gets
  return unless input
  input.chomp!
  if input == "1"
    if Gif.count > 0
      select_criteria
    else
      puts "No gifs in database. Please insert one first."
    end
  elsif input == "2"
    enter_url
  else
    puts "'#{input}' is not a valid selection"
    get_menu_selection
  end
end

def receive_gif(data)
  category = data[2], emotion = data[3], reference = data[4]
  puts data
=begin
  urls = Gif.full_query(category, emotion, reference)
  if urls.length < 1
=end
    puts "Category: #{category}, Emotion: #{emotion}, Reference: #{reference}"
    #urls = Gif.backup_query("emotion", emotion)
    #puts "Here's your gifs!"
    #puts urls
  #end
end

def insert_gif(data)
  url = data[1], category = data[2], emotion = data[3], reference = data[4]
  Gif.new(url, category, emotion, reference).save
end

def choose_selection(input, print_array, return_method, type, order, data_array)
  if input.to_i < 0 || input.to_i > (print_array.length + 1)
    case return_method
      when "category"
        what_category(type, order, data_array)
      when "emotion"
        what_emotion(type, order, data_array)
      when "reference"
        what_reference(type, order, data_array)
    end
  else
    print_array[input.to_i]
  end
end

get_menu_selection
