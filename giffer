#!/usr/bin/env ruby

$LOAD_PATH << "lib"
$LOAD_PATH << "models"

require 'environment'
Environment.environment = ENV["ENVIRONMENT"] || "production"
$stderr = $stdout

require 'gif'

def menu
<<EOS
What do you want to do?
1. Get a .gif
2. Give a .gif
EOS
end

def menu_criteria
<<EOS
What is your first criteria?
1. Category
2. Emotion
3. Reference
4. Random Sample
EOS
end

=begin
def record_desired_outcomes_for(person)
  Injury.all.each do |injury|
    puts "What if #{injury.name}?"
    puts "1. Put me out of my misery."
    puts "2. Just a flesh wound. Carry on."
    response = gets.chomp!
    kill_them = (response == "1")
    if kill_them
      puts "We'll kill you if you suffer from #{injury.name}"
    else
      puts "We'll let you linger on if you suffer from #{injury.name}"
    end
    InjuryOutcome.create_for(person, injury, kill_them)
  end
end

def add_person
  puts "Who do you want to add?"
  person_name = gets
  return unless person_name
  person_name.chomp!
  person = Person.new(person_name)
  if person.save
    puts "#{person.name} has been added."
    record_desired_outcomes_for(person)
  else
    puts person.errors
    add_person
  end
end

def add_injury
  puts "What is the injury you want to add?"
  injury_name = gets
  return unless injury_name
  injury_name.chomp!
  injury = Injury.new(injury_name)
  if injury.save
    puts "#{injury_name} has been added."
  else
    puts injury.errors
    add_injury
  end
end
=end

def select_criteria
  puts menu_criteria
  criteria = gets
  return unless criteria
  criteria.chomp!
  case criteria
  when "1"
    what_category("get", 1)
  when "2"
    what_emotion("get", 1)
  when "3"
    what_reference("get", 1)
  when "4"
    random_sample
  else
    puts "'#{criteria}' is not a valid selection"
    select_criteria
  end
end

def enter_url
  puts "Enter your url:"
  url = gets
  return unless url
  url.chomp!
  #pass url and get/give variable
  what_category("give", 1)
end

def what_category(type, order)
  puts "What Category?"
  #puts categories from db
  puts "x. New Category" if type == "give"
  category = gets
  return unless category
  category.chomp!
  new_tag("category", order, "2") if category == "x"
  if order < 3
    order += 1
    what_emotion(type, order)
  else
    puts "finish menu and open links"
  end
end

def what_emotion(type, order)
  puts "What Emotion?"
  #puts emotions from db
  puts "x. New Emotion" if type == "give"
  emotion = gets
  return unless emotion
  emotion.chomp!
  new_tag("emotion", order, "3") if emotion == "x"
  if order < 3
    order += 1
    what_reference(type, order)
  else
    puts "finish menu and open links"
  end
end

def what_reference(type, order)
  puts "What Reference?"
  #puts references from db
  puts "x. New Reference" if type == "give"
  reference = gets
  return unless reference
  reference.chomp!
  new_tag("reference", order, "1") if reference == "x"
  if order < 3
    order += 1
    what_category(type, order)
  else
    puts "finish menu and open links"
  end
end

def random_sample
  puts "random sample here"
end

def new_tag(type, order, next_method)
  puts "Enter new #{type}"
  tag_name = gets
  return unless tag_name
  tag_name.chomp!
  #database stuff
  if order < 3
    order += 1
    case next_method
    when "1"
      what_category("give", order)
    when "2"
      what_emotion("give", order)
    when "3"
      what_reference("give", order)
    end
  else
    puts "finish menu and open links"
  end
end

# REPL
# Read - Eval - Print Loop
def get_menu_selection
  puts menu
  input = gets
  return unless input
  input.chomp!
  if input == "1"
    select_criteria
  elsif input == "2"
    enter_url
  else
    puts "'#{input}' is not a valid selection"
    get_menu_selection
  end
end

get_menu_selection
