#!/usr/bin/env ruby

$LOAD_PATH << "lib"
$LOAD_PATH << "models"

require 'environment'
require 'gif'
Environment.environment = ENV["ENVIRONMENT"] || "production"
$stderr = $stdout

@test_var = "test_var"
@url
@emotion
@reference

def menu
<<EOS
What do you want to do?
1. Get a .gif
2. Give a .gif
EOS
end

def emo_defaults
  ["Happy", "Angry", "Sad", "Approval", "Excitement", "Sarcasm", "Skepticism", "I Cant Even", "Generic"]
end

def ref_defaults
  ["Meme", "Sports", "Politics", "Generic"]
end

def enter_url
  puts "Enter your url:"
  url = gets
  return unless url
  url.chomp!
  @url = url
  what_emotion("give")
end

def print_db_tags(tag_type, print_type)
    def_array = [], print_array = [], uniq_array = []
    temp_db_array = Gif.all.map{ |gif| [gif.url, gif.emotion, gif.reference, gif.id] }
    count = 1

    if print_type == "give"
      case tag_type
        when "emotion"
          def_array = emo_defaults
        when "reference"
          def_array = ref_defaults
      end
      def_array.each do |tag|
        uniq_array << tag
      end
    end

    temp_db_array.each do |tag|
      if tag_type == "emotion"
        tag_text = tag[1]
      else
        tag_text = tag[2]
      end
      uniq_array << tag_text
    end

    uniq_array.uniq!
    uniq_array.each do |tag|
      print_array << tag
      puts "#{count}. #{tag}"
      count += 1
    end
    puts ""
    return print_array
end

def what_emotion(type)
  puts ""
  puts "What Emotion?"
  print_array = print_db_tags("emotion", type)

  puts "x. New Emotion" if type == "give"
  emotion = gets
  return unless emotion
  emotion.chomp!
  if emotion == "x"
    new_tag("emotion")
  else
    @emotion = choose_selection(emotion, print_array, "emotion", type)
    what_reference(type)
  end
end

def what_reference(type)
  puts ""
  puts "What Reference?"
  print_array = print_db_tags("reference", type)

  puts "x. New Reference" if type == "give"
  puts ""
  reference = gets
  return unless reference
  reference.chomp!
  if reference == "x"
    new_tag("reference")
  else
    @reference = choose_selection(reference, print_array, "reference", type)
    puts "finish menu and open links" #for testing purposes
    if type == "give"
      insert_gif
    else
      receive_gif
    end
  end
end

def new_tag(type)
  puts "Enter new #{type}"
  puts ""
  tag_name = gets
  return unless tag_name
  tag_name.chomp!
  case type
  when "emotion"
    @emotion = tag_name
    what_reference("give")
  when "reference"
    @reference = tag_name
    puts ""
    puts "finish menu and open links" #for testing purposes
    insert_gif
  end
end

# REPL
# Read - Eval - Print Loop
def get_menu_selection
  puts menu
  input = gets
  return unless input
  input.chomp!
  if input == "1"
    if Gif.count > 0
      what_emotion("get")
    else
      puts "No gifs in database. Please insert one first."
    end
  elsif input == "2"
    enter_url
  else
    puts "'#{input}' is not a valid selection"
    get_menu_selection
  end
end

def receive_gif
  puts ""
  puts "Emotion: #{@emotion}, Reference: #{@reference}"
  puts "Here's your gifs!"
  urls = Gif.full_query(@emotion, @reference)
  if urls.length < 1
    urls = Gif.backup_query("emotion", @emotion)
    r_urls = Gif.backup_query("reference", @reference)
    urls.concat(r_urls)
  end
  open_urls(urls)
end

def insert_gif
  puts ""
  puts "url: #{@url}, emotion: #{@emotion}, reference: #{@reference}"
  Gif.new(@url, @emotion, @reference).save
end

def open_urls(urls)
  temp_array = urls.map{ |gif| [gif.url, gif.emotion, gif.reference, gif.id] }
  url_array = []
  temp_array.each do |gif|
    url_array << gif[0]
  end
  puts url_array
  url_array.each do |url|
    IO.popen('open -a Google\ Chrome '+url, 'r+') do |pipe|
      pipe.close_write
    end
  end
end

# ex. tag_type = emotion/reference, action_type = get/give
def choose_selection(input, print_array, tag_type, action_type)
  input = input.to_i - 1
  if input < 0 || input > (print_array.length - 1)
    puts ""
    puts "Invalid selection. Please select again."
    case tag_type
      when "emotion"
        what_emotion(action_type)
      when "reference"
        what_reference(action_type)
    end
  else
    return print_array[input]
  end
end

get_menu_selection
